routines
  what makes a good and bad routine

what is a routine?
  a routine is an individual method or procedure invocable for a single purpose
    a function in c++

routine makes programs easier to read and easier to understand than any other feature of any programming language

not just good for avoiding duplicate code

7.1 valid reasons to create a routine
1. reduce complexity

Summary of Reasons to Create a Routine
Here’s a summary list of the valid reasons for creating a routine:
■ Reduce complexity
■ Introduce an intermediate, understandable abstraction
■ Avoid duplicate code
■ Support subclassing
■ Hide sequences
■ Hide pointer operations
■ Improve portability
■ Simplify complicated boolean tests
■ Improve performance
In addition, many of the reasons to create a class are also good reasons to create a rou- tine:
■ Isolate complexity
■ Hide implementation details
■ Limit effects of changes
■ Hide global data
■ Make central points of control
■ Facilitate reusable code
■ Accomplish a specific refactoring

7.2 design at the routine level
  each routine do one thing well and nothing else try
cohesion is important
functional cohesion is strongest
  one and only one operation
sequential cohesion when a routine contains operations that must be performed in a specific order
  share data from step to step
communicational cohesion

7.3 good routine names

7.4 how long

7.5 how to use routine parameters
  limit to a number of seven
  update inputval by making new working val

7.7 routines and inline routines and macros

look up more on c++ macros

■ The most important reason for creating a routine is to improve the intellectual manageability of a program, and you can create a routine for many other good reasons. Saving space is a minor reason; improved readability, reliability, and modifiability are better reasons.
■ Sometimes the operation that most benefits from being put into a routine of its own is a simple one.
■ You can classify routines into various kinds of cohesion, but you can make most routines functionally cohesive, which is best.
■ The name of a routine is an indication of its quality. If the name is bad and it’s accurate, the routine might be poorly designed. If the name is bad and it’s inac- curate, it’s not telling you what the program does. Either way, a bad name means that the program needs to be changed.
■ Functions should be used only when the primary purpose of the function is to return the specific value described by the function’s name.
■ Careful programmers use macro routines with care and only as a last resort.
